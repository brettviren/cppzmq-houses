#+title: cppzmq houses
#+author: Brett Viren
#+email: brett.viren@gmail.com
#+subtitle: ZeroMQ security with cppzmq
#+OPTIONS:   H:4 num:nil toc:2
#+SETUPFILE: setup/theme-readtheorg-local.setup
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
#+HTML_HEAD: <style> p{max-width:800px;}</style>
#+HTML_HEAD: <style> li{max-width:800px;}</style>
#+LINK: api http://api.zeromq.org/master:%s
#+MACRO: zman [[http://api.zeromq.org/master:$1][~$1($2)~]]
#+MACRO: czman [[http://czmq.zeromq.org/czmq4-0:$1][~$1($2)~]]

* Introduction

Here we tour ZeroMQ Authentication Protocol (ZAP) and explore how to
use it to provide security to applications that are based on ~cppzmq~.
Previously, we took a [[https://brettviren.github.io/cppzmq-tour][tour of cppzmq basics]] and so there is no need to
retread those steps here.

Instead, this tour builds on that and visits the land of [[https://rfc.zeromq.org/spec/27/][27/ZAP RFC]].
This RFC describes a *protocol* on which ZeroMQ security mechanism is
based.  This tour will walk a path first described by Pieter's ZeroMQ
Security blog entries (parts [[http://hintjens.com/blog:48][1]] and [[http://hintjens.com/blog:49][2]]).  We'll use the same series of
"houses" to provide a metaphor for different levels and types of
security.  We'll also invent a new one.  

After some more conceptual introduction, each subsequent section will
provide a tour of one of these "houses".

** An agent

As we will learn, central to implementing ZAP is to provide an
authentication /agent/ which runs concurrently with and inside the
application.  The original "houses" from the blog have been updated
and available as the [[https://github.com/zeromq/czmq/tree/master/examples/security][CZMQ examples]] and they make use of CZMQ's [[http://czmq.zeromq.org/manual:zauth][zauth]]
actor as the ZAP agent.  In C++, we may already develop applications
on top of ~zmqpp~ and to make use of the [[https://zeromq.github.io/zmqpp/classzmqpp_1_1auth.html][zmqpp::auth]] class.  In Python
we may rely on PyZMQ's [[https://pyzmq.readthedocs.io/en/latest/api/zmq.auth.html][zmq.auth]] module.

This path is clearly well trodden.  However, as the past work hints at,
the implementation of the agent is tied closely to the programming paradigm
followed by the application.  For C++ we may already follow ~zmqpp~ path
but ZeroMQ community has yet (?) to walk this path with ~cppzmq~ in hand
(see [[https://github.com/zeromq/cppzmq/issues/409][issue 409]]).  And thus, this tour hopes to close that ticket by
providing some formula to clean the houses on this path using ~cppzmq~.


** The protocol

The [[https://rfc.zeromq.org/spec/27/][27/ZAP]] RFC describes the ZeroMQ authentication protocol itself.
It is important to understand as we we will implement it at the
application level.  ZAP defines an authentication request message
which our application must receive and the schema of the required
reply message which our application must supply.

At first, it seems that there is a [[https://en.wikipedia.org/wiki/Catch-22][catch-22]] here.  We want to send
secure messages but we must send messages to provide security.  This
paradox is broken by the 27/ZAP *requiring* that these messages are
sent over a specific address ~inproc://zeromq.zap.01~.  That is, ZAP
messages *must* be sent over a trusted transport within our process.
If we can't trust our own code (~*cough*~) then what can we trust?

** The Collusion

Reading 27/ZAP, it's clear how an application may explicitly query the
authentication agent via ZAP (see "airhouse") but that's not typically
what we want to do.  We want our various ZeroMQ sockets to magically
honor whatever our ZAP agent deems proper.  27/ZAP does not specify
(and rightly so) how that should work.

Instead, the hard-wired address ~inproc://zeromq.zap.01~ that our
agent binds is also hard-wired in low-level ~libzmq~.  Thus the core
of ZeroMQ "calls out" to our application-level agent to fulfill our
security policies.  See some brief discussion of this in the
sub-section [[https://rfc.zeromq.org/spec/27/#zmtp-30-compatibility][ZMTP 3.0 compatibility]] and the section of [[https://rfc.zeromq.org/spec/23/#authentication-and-confidentiality][23/ZMTP on
authentication and confidentiality]].



* The houses.

Enough overview, we will now move on to actual examples of the
traditional ZeroMQ "houses" implemented in ~cppzmq~ plus one new one.
For each we will explore different implementations of the agent.

| house |                         | code           |
| type  | security mechanism      | pattern        |
|-------+-------------------------+----------------|
| grass | none                    | none           |
| straw | IP address ACL          | inline lambda  |
| wood  | user/pass               | function       |
| stone | server cert, encryption |                |
| iron  | client cert, encryption |                |
| air   | proxy for HTTP          | explicit query |
|-------+-------------------------+----------------|


** Grasslands 

This is the non-security security example.  It's so non-security it is
not even a house.  It is a trusting grass land where everything is
open.  Here is a port to ~cppzmq~ of the CZMQ example:

#+include: grasslands.cpp src c++

** Strawhouse

This example adds an ACL based on the remote IP address which is
provided to the application via ZAP.  The CZMQ version introduces the
~zauth~ "actor" which provides the ZAP handler.  ~cppzmq~ does not
provide and actor pattern (some ideas for one were explored in [[https://github.com/zeromq/cppzmq/pull/392][PR
392]]).  To start with, we simply dump our authentication code into a
C++ lambda.

#+include: strawhouse.cpp src c++

** Woodhouse

This examples adds a plain text user name and password to the
strawhouse ACL.  It also factors out the body of the lambda into a
function but still uses a lambda to pass in the ZeroMQ context.  This
context must be shared by the sockets that will participate in ZAP at
the ZMTP level.

#+include: woodhouse.cpp src c++

** Stonehouse

While the previous houses of cellulose may burn easily, we now add
some semblance of security.  This example adds an encrypted connection
and a method to assure the "client" that the "server" is indeed to be
trusted.  This example further abstracts the agent code into an
"actor" which factors the thread related parts away from the
authentication bits.

#+include: stonehouse.cpp src c++

** Airhouse



